--- a/net/minecraft/src/SpawnerAnimals.java
+++ b/net/minecraft/src/SpawnerAnimals.java
@@ -35,13 +35,13 @@
          EnumCreatureType enumcreaturetype = EnumCreatureType.values()[i4];
          if (world.countEntities(enumcreaturetype.creatureClass) <= enumcreaturetype.maxNumberOfCreature * eligibleChunksForSpawning.size() / 256) {
             label110:
-            for(ChunkCoordIntPair chunkcoordintpair : eligibleChunksForSpawning) {
+            for(Object object : eligibleChunksForSpawning) {
                if (world.rand.nextInt(50) == 0) {
-                  MobSpawnerBase mobspawnerbase = world.getWorldChunkManager().getBiomeGenAtChunkCoord(chunkcoordintpair);
+                  MobSpawnerBase mobspawnerbase = world.getWorldChunkManager().getBiomeGenAtChunkCoord((ChunkCoordIntPair)object);
                   Class[] aclass = mobspawnerbase.getEntitiesForType(enumcreaturetype);
                   if (aclass != null && aclass.length != 0) {
                      int j1 = world.rand.nextInt(aclass.length);
-                     ChunkPosition chunkposition = getRandomSpawningPointInChunk(world, chunkcoordintpair.chunkXPos * 16, chunkcoordintpair.chunkZPos * 16);
+                     ChunkPosition chunkposition = getRandomSpawningPointInChunk(world, ((ChunkCoordIntPair)object).chunkXPos * 16, ((ChunkCoordIntPair)object).chunkZPos * 16);
                      int k1 = chunkposition.x;
                      int l1 = chunkposition.y;
                      int i2 = chunkposition.z;
@@ -71,6 +71,7 @@
                                     float f5 = f2 - (float)world.spawnZ;
                                     float f6 = f3 * f3 + f4 * f4 + f5 * f5;
                                     if (!(f6 < 576.0F)) {
+                                       EntityLiving entityliving;
                                        try {
                                           entityliving = (EntityLiving)aclass[j1].getConstructor(World.class).newInstance(world);
                                        } catch (Exception exception) {
