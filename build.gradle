buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://github.com/ancientmc/ancientmc-maven/raw/maven' }
    }
    dependencies {
        classpath 'com.ancientmc.acp:acp-gradle:0.2.0-beta-dev'
    }
}

plugins {
    id 'java-library'
}

ext {
    MC_VERSION = 'a1.2.6'
}

version = "client-${MC_VERSION}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    maven { url = 'https://libraries.minecraft.net' }
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = 'https://github.com/ancientmc/ancientmc-maven/raw/maven/' }
}

sourceSets {
    main
}

configurations {
    jarsplitter
    mcinjector
    forgeart
    fernflower
    diffpatch
    binpatcher
}

dependencies {
    jarsplitter 'net.minecraftforge:jarsplitter:1.1.4'
    mcinjector 'de.oceanlabs.mcp:mcinjector:4.0-am'
    forgeart 'net.minecraftforge:ForgeAutoRenamingTool:0.1.24'
    fernflower 'com.ancientmc:fernflower:1.0'
    diffpatch 'net.minecraftforge:DiffPatch:2.0.7'
    binpatcher 'net.minecraftforge:binarypatcher:1.1.1'
}

apply plugin: 'com.ancientmc.acp'

import com.ancientmc.acp.utils.*

acp {
    data = "com.ancientmc.acp:acp-data:${MC_VERSION}"
}

tasks.withType(JavaExec) {
    systemProperty 'java.library.path', Paths.DIR_NATIVES
}

task setup() {
    dependsOn(':copySrc')
}

task runClient(type: JavaExec) {
    group = 'acp-run'
    mainClass = 'acp.client.Start'
    classpath = sourceSets.main.runtimeClasspath
    javaLauncher = javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(8) }
}

FileFilter tempFilter = (File file) -> !file.name.equals(MC_VERSION + '.jar') && !file.name.endsWith('.json')
FileFilter runFilter = (File file1) -> !file1.name.contains('resources') && !file1.name.contains('bin')

clean {
    delete(file("${Paths.DIR_SRC}\\net\\"))
    delete(file("${Paths.DIR_SRC}\\risugami\\"))
    delete(file("src\\main\\resources\\").listFiles())
    delete(file(buildDir.absolutePath + "backupSrc\\"))
    delete(file("cfg\\temp\\").listFiles(tempFilter))
    delete(file("run\\").listFiles(runFilter))
}