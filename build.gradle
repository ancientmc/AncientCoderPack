buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://github.com/ancientmc/ancientmc-maven/raw/maven' }
    }
    dependencies {
        classpath 'com.ancientmc.acp:ACP-Gradle:0.1.0-beta'
        classpath 'commons-io:commons-io:2.8.0'
        classpath 'com.google.code.gson:gson:2.9.1'
    }
}

plugins {
    id 'java-library'
}

ext {
    MC_VERSION = 'a1.2.6'
    MC_REPO = "${project.gradle.gradleUserHomeDir}\\caches\\ancientcoderpack\\mc_repo\\"
}

version = "client-${MC_VERSION}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    mavenCentral()
    mavenLocal()
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://maven.quiltmc.org/repository/release/' }
}

sourceSets {
    main
}

configurations {
    retroguard
    mcinjector
    enigma
    quiltflower
    diffpatch
    binpatch
}

apply plugin: 'com.ancientmc.acp'

import com.ancientmc.acp.utils.*

dependencies {
    implementation gradleApi()
    implementation files(MC_REPO).getAsFileTree()

    retroguard 'de.oceanlabs.mcp:RetroGuard:3.6.6'
    retroguard configurations.retroguard.dependencies
    mcinjector 'de.oceanlabs.mcp:mcinjector:3.8.0'
    enigma 'cuchaz:enigma-cli:2.2.0'
    enigma 'cuchaz:enigma:2.2.0'
    enigma configurations.enigma.dependencies
    quiltflower 'org.quiltmc:quiltflower:1.9.0'
    diffpatch 'net.minecraftforge:DiffPatch:2.0.7'
    binpatch 'net.minecraftforge:binarypatcher:1.1.1'
}

tasks.withType(JavaExec) {
    systemProperty 'java.library.path', Paths.ACP_DIR_NATIVES
}

String moddingDir = "${project.buildDir.path}\\modding\\"
String backupSrc = "${moddingDir}\\backupSrc\\"

task setup() {
    group = 'acp-run'
    dependsOn(':execute')
    doLast {
        copy {
            from(Paths.ACP_DIR_SRC)
            into(backupSrc)
        }
    }
}

task runClient(type: JavaExec) {
    group = 'acp-run'
    mainClass = 'acp.client.Start'
    classpath = sourceSets.main.runtimeClasspath
    javaLauncher = javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(8) }
}

// Intermediary task, use reobfJar instead. Do not publish anything generated from this task, since the classes will still be deobfuscated.
jar {
    destinationDirectory = file('build\\libs\\')
    archiveBaseName = 'interm'
    exclude('acp\\')
    from(zipTree(file(Paths.BASE_JAR))) {
        include('com\\')
        include('paulscode\\')
    }
}

String outJar = "${project.buildDir.path}\\libs\\${version}.jar"
String modPatchDir = "${moddingDir}\\patches\\"

task genBinPatches(type: JavaExec) {
    group = 'modtools'
    mainClass = 'net.minecraftforge.binarypatcher.ConsoleTool'
    classpath = files(project.configurations.getByName('binpatch'))
    args('--clean', Paths.BASE_JAR, '--dirty', outJar, '--output', "${modPatchDir}\\bin\\client.lzma")
}

// Mainly for if you want to share your changes to MC classes on GitHub, use "genBinPatches" for actual mod distribution.
task genDiffPatches(type: JavaExec) {
    group = 'modtools'
    mainClass = 'codechicken.diffpatch.DiffPatch'
    classpath = files(project.configurations.getByName('diffpatch'))
    args('--diff', backupSrc, Paths.ACP_DIR_SRC, '--output', "${modPatchDir}\\diff\\")
    ignoreExitValue true
}

FileFilter gitIgnoreFilter = (File file) -> !file.name.endsWith('.gitignore')
FileFilter runFilter = (File file) -> !file.name.endsWith('.gitignore') && !file.name.contains('bin')

clean {
    delete(file(Paths.ACP_DIR_NATIVES))
    delete(file("${Paths.ACP_DIR_SRC}\\net\\"))
    delete(file(Paths.ACP_DIR_TEMP).listFiles(gitIgnoreFilter))
    delete(file(Paths.ACP_DIR_RESOURCES).listFiles(gitIgnoreFilter))
    delete(file(Paths.ACP_DIR_RUN).listFiles(runFilter))
    delete(file(Paths.ACP_DIR_LOGS).listFiles(gitIgnoreFilter))
}