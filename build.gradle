plugins {
    id 'java-library'
    id 'eclipse'
    id 'de.undercouch.download' version '4.1.2'
    id 'java-gradle-plugin'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

group = 'com.entropy.rcp'
version = '1.0-a1.2.6'
logger.lifecycle('Version: ' + version + ' Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

import com.entropy.rcp.OSName
import org.gradle.internal.os.OperatingSystem

repositories {
    mavenCentral()
    mavenLocal()
    maven { url = 'https://libraries.minecraft.net' }
    maven { url = 'https://nexus.velocitypowered.com/repository/maven-public/' }
    maven { url = 'https://www.beatunes.com/repo/maven2/' }
}

configurations {
    retroguard
    jadretro
}

dependencies {
    implementation 'net.sf.jopt-simple:jopt-simple:4.5'
    implementation 'org.ow2.asm:asm-all:4.1'
    implementation 'net.java.jinput:jinput:2.0.5'
    implementation 'net.java.jutils:jutils:1.0.0'
    if (OperatingSystem.current().isMacOsX()) {
        implementation 'org.lwjgl.lwjgl:lwjgl:2.9.1'
        implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.1'
    } else {
        implementation 'org.lwjgl.lwjgl:lwjgl:2.9.0'
        implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.0'
    }

    implementation 'com.paulscode:soundsystem:20120107'
    implementation 'com.paulscode:codecjorbis:20101023'
    implementation 'com.jcraft:jogg:0.0.7'
    implementation 'com.jcraft:jorbis:0.0.17'
    implementation 'com.paulscode:librarylwjglopenal:20100824'
    implementation 'com.paulscode:codecwav:20101023'

    retroguard 'de.oceanlabs.mcp:RetroGuard:3.6.6'
    jadretro 'net.sf.jadretro:jadretro:1.6.1'
    implementation configurations.retroguard.dependencies
}

ext {
    OSNAME = OSName.getOSName()
    MC_VERSION = "a1.2.6"
    MC_JAR = "https://piston-data.mojang.com/v1/objects/a68c817afd6c05c253ba5462287c2c19bbb57935/client.jar"
    RCP_DIR_CORE = "$project.projectDir\\core"
    RCP_DIR_MAPPING = "${RCP_DIR_CORE}\\mapping"
    RCP_DIR_DECOMP = "${RCP_DIR_CORE}\\decomp"
    RCP_DIR_TEMP = "${RCP_DIR_DECOMP}\\temp"
    RCP_DIR_PATCHES = "${RCP_DIR_CORE}\\patches"
    RCP_PATCH_FILE = "${RCP_DIR_PATCHES}\\patch\\minecraft.patch"
    RCP_CODECMUS_PATCH_FILE = "${RCP_DIR_PATCHES}\\patch\\CodecMus.patch"
    RCP_DIR_JARS = "$project.projectDir\\jars\\"
    RCP_DIR_NATIVES = "${RCP_DIR_JARS}\\bin\\natives\\${OSNAME}\\"
    RCP_DIR_SRC = "src\\main\\java"
    RCP_DIR_RESOURCES = "src\\main\\resources"

    RCP_RG = project.getConfigurations().findByName("retroguard")
    RCP_JADRETRO = project.getConfigurations().findByName("jadretro")
    RCP_ASSET_EXTRACTOR = "${RCP_DIR_PATCHES}\\McAssetExtractor-1.0_02-w-dependencies.jar"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.withType(JavaExec) {
    systemProperty "java.library.path", "${RCP_DIR_NATIVES}"
}

/**
 * WARNING: This task will delete all main RCP-generated files within the directory, including MC sources. This is intended for
 * if you wanted to reset the main build process for whatever reason, or if something has gone horribly wrong.
 */
task cleanAndStartOver(type: Delete) {
    delete (file(RCP_DIR_TEMP).listFiles(),
            file(RCP_DIR_SRC + "\\net"), // Minecraft sources
            RCP_DIR_MAPPING + MC_VERSION + '.jar', // Minecraft jar
            RCP_DIR_MAPPING + MC_VERSION + '-srg.jar', // SRG-ified Minecraft jar
            file(RCP_DIR_RESOURCES).listFiles(), // Everything in the main resources folder
            file(RCP_DIR_JARS + "resources"), // The runtime resources folder
            file(RCP_DIR_NATIVES).listFiles(), // LWJGL and JInput natives
            file(RCP_DIR_JARS + "saves"), // MC saves folder
            file(RCP_DIR_JARS + "texturepacks"), // MC texturepacks folder
            file(RCP_DIR_JARS + "options.txt")) // MC options text file
}


task downloadJar(type: Download) {
    src MC_JAR
    dest file("${RCP_DIR_MAPPING}\\${MC_VERSION}.jar")
}

task jarDeobf(type: JavaExec, dependsOn: downloadJar) {
    inputs.file downloadJar.dest
    main = "RetroGuard"
    classpath = files(RCP_RG)
    args (downloadJar.dest, RCP_DIR_MAPPING + '/' + MC_VERSION + '-srg.jar', RCP_DIR_MAPPING + '/' + MC_VERSION + '.rgs')
}

task unzipJar(type: Copy) {
    from zipTree(file("${RCP_DIR_MAPPING}\\${MC_VERSION}-srg.jar"))
    into file(RCP_DIR_TEMP)
}

task fixClassFiles(type: JavaExec) {
    main = "net.sf.jadretro.Main"
    classpath = files(RCP_JADRETRO)
    args('-b', RCP_DIR_TEMP)
}

task decompileClassFiles(type: Exec) {
    commandLine("${RCP_DIR_DECOMP}\\jad.exe", '-b', '-d', RCP_DIR_SRC, '-dead', '-o', '-r', '-s', '.java', '-stat', '-v', "${RCP_DIR_TEMP}\\*.class")
}

task decompileLaunchClassFiles(type: Exec) {
    commandLine("${RCP_DIR_DECOMP}\\jad.exe", '-b', '-d', RCP_DIR_SRC, '-dead', '-o', '-r', '-s', '.java', '-stat', '-v', "${RCP_DIR_TEMP}\\net\\minecraft\\client\\*.class")
}

// TODO: Either modify the RG script directly to add packages or find a repacking plugin.
task repackageSourceFiles(type: Exec) {
    commandLine("${RCP_DIR_PATCHES}\\repackage.exe", RCP_DIR_SRC, 'net.minecraft.src')
}

// TODO: Use external DiffPatch plugin.
task patchSourceFiles(type: Exec) {
    commandLine("${RCP_DIR_PATCHES}\\applydiff.exe", '-p', '1', '-u', '-i', RCP_PATCH_FILE, '-d', RCP_DIR_SRC)
}

task patchCodecMusFiles(type: Exec) {
    commandLine("${RCP_DIR_PATCHES}\\applydiff.exe", '-p', '1', '-u', '-i', RCP_CODECMUS_PATCH_FILE, '-d', RCP_DIR_SRC)
}

task copyJarAssets(type: Copy) {
    group = "RCP"
    description = "Copies the assets found in the JAR file."
    from file(RCP_DIR_TEMP)
    into file(RCP_DIR_RESOURCES)
    exclude('com', 'net', 'paulscode', '*.class')
}

/**
 * Modification of GitHub user rhmeuer's program McAssetExtractor.
 */
task downloadMetaAssets(type: JavaExec) {
    group = "RCP"
    description = "downloads the meta assets (mainly sound files) from Mojang's servers."
    main = "com.github.rmheuer.mcasset.McAssetExtractor"
    classpath = files(RCP_ASSET_EXTRACTOR)
    args(MC_VERSION, file(RCP_DIR_JARS))
}

// There's definitely a better way to do this.
task downloadNatives {
    download {
        if(OperatingSystem.current().isMacOsX()) {
            src ("https://repo.maven.apache.org/maven2/org/lwjgl/lwjgl/lwjgl-platform/2.9.0/lwjgl-platform-2.9.1-natives-${OSNAME}.jar")
            dest "${RCP_DIR_NATIVES}"
        } else {
            src ("https://repo.maven.apache.org/maven2/org/lwjgl/lwjgl/lwjgl-platform/2.9.0/lwjgl-platform-2.9.0-natives-${OSNAME}.jar")
            dest "${RCP_DIR_NATIVES}"
        }
    }
    download {
        src ("https://repo.maven.apache.org/maven2/net/java/jinput/jinput-platform/2.0.5/jinput-platform-2.0.5-natives-${OSNAME}.jar")
        dest "${RCP_DIR_NATIVES}"
    }
}

// Again, there's probably a better way to do this.
task extractNatives {
    copy {
        if(OperatingSystem.current().isMacOsX()) {
            from(zipTree(file("${RCP_DIR_NATIVES}\\lwjgl-platform-2.9.1-natives-osx.jar")))
            into(file("${RCP_DIR_NATIVES}"))
            exclude("META_INF")
        } else {
            from(zipTree(file("${RCP_DIR_NATIVES}\\lwjgl-platform-2.9.0-natives-${OSNAME}.jar")))
            into(file("${RCP_DIR_NATIVES}"))
            exclude("META_INF")
        }
    }
    copy {
        from(zipTree(file("${RCP_DIR_NATIVES}\\jinput-platform-2.0.5-natives-${OSNAME}.jar")))
        into(file("${RCP_DIR_NATIVES}"))
        exclude("META_INF")
    }
}

task cleanUpRemnants (type: Delete) {
    delete (file(RCP_DIR_TEMP).listFiles(),
            RCP_DIR_MAPPING + MC_VERSION + '.jar',
            RCP_DIR_MAPPING + MC_VERSION + '-srg.jar',
            file("${RCP_DIR_NATIVES}\\jinput-platform-2.0.5-natives-${OSNAME}.jar"),
            file("${RCP_DIR_NATIVES}\\lwjgl-platform-2.9.0-natives-${OSNAME}.jar"),
            file("${RCP_DIR_NATIVES}\\lwjgl-platform-2.9.1-natives-${OSNAME}.jar"),
            file("${RCP_DIR_NATIVES}\\META-INF\\"))
}

task runClient(type: JavaExec) {
    description = "Runs the client."
    main = "com.entropy.rcp.Start"
    classpath = sourceSets.main.runtimeClasspath
}
