/** I'm not good with gradle; this could probably be, like, 1000x cleaner.
 *  This project is a proof-of-concept to create a buildable gradle for old Minecraft versions (in this case, Alpha 1.2.6).
 *  It is inspired by and uses files/tools from Mod Coder Pack (MCP) version 2.5, as well as one tool from Github user rhmeuer.
 *  The Mod Coder Pack was originally created by Searge with help from ProfMobius and others.
 *  Full credits can be found in the root directory in ATTRIBUTIONS.txt.
 */

plugins {
    id 'java-library'
    id 'eclipse'
    id 'de.undercouch.download' version '4.1.2'
    id 'java-gradle-plugin'
}

group 'com.entropy.rcp'
version = '1.0-a1.2.6'
logger.lifecycle('Version: ' + version + ' Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))


ext {
    MC_VERSION = "a1.2.6"
    MC_JSON_DOWNLOAD = 'https://piston-meta.mojang.com/v1/packages/b539c8b7baabb3ab8886fa634310de51aeea60fc/a1.2.6.json'
    MC_JAR_DOWNLOAD = 'https://piston-data.mojang.com/v1/objects/a68c817afd6c05c253ba5462287c2c19bbb57935/client.jar'

    RCP_DIR_CORE = "$project.projectDir\\core/"
    RCP_DIR_RESOURCES = "src/main/resources/"
    RCP_DIR_MAPPING = RCP_DIR_CORE + "mapping/"
    RCP_DIR_DECOMP = RCP_DIR_CORE + "decomp/"
    RCP_DIR_PATCHES = RCP_DIR_CORE + "patches/"
    RCP_PATCH_FILE = RCP_DIR_PATCHES + "patch/minecraft.patch"
    RCP_CODECMUS_PATCH_FILE = "$project.projectDir\\CodecMus.patch"

    // TODO: Figure out how to change RCP_RG to work on any device.
    RCP_RG = "C:/Users/mason/.gradle/caches/modules-2/files-2.1/de.oceanlabs.mcp/RetroGuard/3.6.6/ffd69fcab06b928cf76144f08b7209ccf0656b6d/RetroGuard-3.6.6.jar"
    RCP_ASSET_EXTRACTOR = RCP_DIR_PATCHES + "McAssetExtractor-1.0-jar-with-dependencies"
    RCP_DIR_TEMP = RCP_DIR_DECOMP + 'temp/'
    RCP_DIR_FINAL = 'src/main/java/'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()
    maven {
        name = 'minecraft'
        url = 'https://libraries.minecraft.net'
    }
    maven {
        name = 'misc'
        url = 'https://nexus.velocitypowered.com/repository/maven-public/'
    }
    maven {
        name = 'jcraft'
        url = 'https://www.beatunes.com/repo/maven2/'
    }
}

dependencies {
    // RCP -- JAVA 8
    implementation 'com.google.code.gson:gson:2.9.1'
    // Minecraft | ASM 4.1 -- JAVA 8
    implementation 'net.sf.jopt-simple:jopt-simple:4.5'
    implementation 'org.ow2.asm:asm-all:4.1'
    implementation 'net.java.jinput:jinput:2.0.5'
    implementation 'net.java.jutils:jutils:1.0.0'
    implementation 'org.lwjgl.lwjgl:lwjgl:2.9.0'
    implementation 'org.lwjgl.lwjgl:lwjgl-platform:2.9.0-natives-windows'
    implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.0'
    implementation 'net.java.jinput:jinput-platform:2.0.5'

    /* MC Sound Files -- JAVA 8
     * In the original jar file, the sound libraries' classes are directly included, but these
     * classes get lost during the MCP process. Because of that, the libraries are instead
     * declared as dependencies within the RCP gradle.
     */
    implementation 'com.paulscode:soundsystem:20120107'
    implementation 'com.paulscode:codecjorbis:20101023'
    implementation 'com.jcraft:jogg:0.0.7'
    implementation 'com.jcraft:jorbis:0.0.17'
    implementation 'com.paulscode:librarylwjglopenal:20100824'
    implementation 'com.paulscode:codecwav:20101023'

    // RetroGuard -- JAVA 8
    implementation 'de.oceanlabs.mcp:RetroGuard:3.6.6'
    implementation 'com.google.code.gson:gson:2.2.4'
    implementation 'net.sf.jopt-simple:jopt-simple:4.5'
    testImplementation 'junit:junit:3.8.2'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.withType(JavaExec) {
    systemProperty "java.library.path", "$project.projectDir\\lib\\"
}
/**
 * WARNING: This task will delete all main RCP-generated files within the directory. This is intended for if you wanted to reset
 * the main build process for whatever reason, or if something has gone horribly wrong.
 */
task cleanAndStartOver(type: Delete) {
    delete (file(RCP_DIR_TEMP).listFiles(),
            file(RCP_DIR_FINAL + "net"),
            RCP_DIR_MAPPING + MC_VERSION + '-srg.jar',
            file(RCP_DIR_RESOURCES).listFiles())
}

task downloadJson(type: Download) {
    group = "RCP"
    description = "Downloads the JSON file from Mojang's servers."
    src MC_JSON_DOWNLOAD
    dest file(RCP_DIR_RESOURCES + MC_VERSION + '.json')
}

task downloadClient(type: Download) {
    group = "RCP"
    description = "Downloads the client from Mojang's servers."
    src MC_JAR_DOWNLOAD
    dest file(RCP_DIR_MAPPING + MC_VERSION + '.jar')
}

task clientDeobf(type: JavaExec, dependsOn: downloadClient) {
    inputs.file downloadClient.dest
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
    group = "RCP"
    description = "Deobfuscates class names, method names, and field names of the client JAR into SRG intermediaries using RetroGuard."
    main = "RetroGuard"
    classpath = files("C:/Users/mason/.gradle/caches/modules-2/files-2.1/de.oceanlabs.mcp/RetroGuard/3.6.6/ffd69fcab06b928cf76144f08b7209ccf0656b6d/RetroGuard-3.6.6.jar")
    args (downloadClient.dest, RCP_DIR_MAPPING + MC_VERSION + '-srg.jar', RCP_DIR_MAPPING + MC_VERSION + '.rgs')
}

task clientUnzip(type: Copy) {
    group = "RCP"
    description = "Unzips, but does not decompile, the SRG-ified class files into a temporary folder."
    from zipTree(file(RCP_DIR_MAPPING + MC_VERSION + '-srg.jar'))
    into file(RCP_DIR_TEMP)
}

task deleteMETAINF(type: Delete) {
    group = "RCP.clientUnzip"
    description "Deletes a file from the META-INF folder."
    delete RCP_DIR_TEMP + 'META-INF/MOJANG_C.DSA'
}

task fixClassFiles(type: Exec) {
    group = "RCP"
    description = "Uses JAD Retro to fix up the class files."
    commandLine(RCP_DIR_DECOMP + 'jadretro.exe', '-b', RCP_DIR_TEMP)
}

task decompileClassFiles(type: Exec) {
    group = "RCP"
    description = "Decompiles the class files using JAD into the main source directory."
    commandLine(RCP_DIR_DECOMP + 'jad.exe', '-b', '-d', RCP_DIR_FINAL, '-dead', '-o', '-r', '-s', '.java', '-stat', '-v', RCP_DIR_TEMP + '*.class')
}

task decompileLaunchClassFiles(type: Exec) {
    group = "RCP"
    description = "Same as decompileClassFiles() but for the classes within net/minecraft/client"
    commandLine(RCP_DIR_DECOMP + 'jad.exe', '-b', '-d', RCP_DIR_FINAL, '-dead', '-o', '-r', '-s', '.java', '-stat', '-v', RCP_DIR_TEMP + 'net/minecraft/client/*.class')
}

task repackageSourceFiles(type: Exec) {
    group = "RCP"
    description = "Applies a package directory for the source files."
    commandLine(RCP_DIR_PATCHES + 'repackage.exe', RCP_DIR_FINAL, 'net.minecraft.src')
}

task patchSourceFiles(type: Exec) {
    group = "RCP"
    description = "Applies a DiffPatch file that fixes up the patchfiles, so the code can run without any major errors."
    commandLine(RCP_DIR_PATCHES + 'applydiff.exe', '-p', '1', '-u', '-i', RCP_PATCH_FILE, '-d', RCP_DIR_FINAL)
}

/**
 * The class CodecMus has this odd quirk where one of its methods tries to inherit two private fields from the PaulsCode's
 * CodecJOrbis, causing errors. This task is supposed to be an attempt to directly patch those fields into CodecMus, but any attempts
 * at using the patch has not worked, which has been really infuriating. I'm wondering if this is something that the original MCP devs
 * were aware of as well, because it is not included within MCP's patch file, so perhaps it's solved within MCP's recompilation process somehow?
 * I'm really hesitant about modifying the original patch file due to licensing. So I'll keep trying, I guess.
 *
 */
task patchCodecMus(type: Exec) {
    group = "RCP"
    description = "See comment above this task within the gradle build file."
    commandLine(RCP_DIR_PATCHES + 'applydiff.exe', '-p', '1', '-u', '-i', RCP_CODECMUS_PATCH_FILE, '-d', RCP_DIR_FINAL)
}

task renamer(type: Exec) {
    group = "RCP"
    description = "Converts method and field names from SRG intermediaries into human-readable names."
    commandLine(RCP_DIR_PATCHES + 'renamer.exe', '-R', '-c', RCP_DIR_PATCHES + "renamer/renamer.conf")
}

task copyJarAssets(type: Copy) {
    group = "RCP"
    description = "Copies the assets found in the JAR file."
    from file(RCP_DIR_TEMP)
    into file(RCP_DIR_RESOURCES)
    exclude('com', 'net', 'paulscode', '*.class')
}

/**
 *
 */
task downloadAssets(type: JavaExec) {
    main = "com.github.rmheuer.mcasset.McAssetExtractor"
    classpath = files("$project.projectDir\\core\\patches\\McAssetExtractor-1.0.1.jar")
    args(MC_VERSION, file(RCP_DIR_RESOURCES))
}

task runClient(type: JavaExec) {
    main = "com.entropy.rcp.Start"
    classpath = sourceSets.main.runtimeClasspath
}