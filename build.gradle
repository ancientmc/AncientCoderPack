buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://github.com/ancientmc/ancientmc-maven/raw/maven' }
    }
    dependencies {
        classpath 'com.ancientmc.acp:ACP-Gradle:0.1.0-beta'
        classpath 'commons-io:commons-io:2.8.0'
        classpath 'com.google.code.gson:gson:2.9.1'
    }
}

plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
}

group 'org.example'
version '0.1.0-SNAPSHOT'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

ext {
    MC_REPO = project.getGradle().getGradleUserHomeDir().getAbsolutePath() + "/caches/ancientcoderpack/mc_repo/"
}

import com.ancientmc.acp.utils.*

repositories {
    flatDir { dirs files(MC_REPO) }
    mavenCentral()
    mavenLocal()
    maven { url = 'https://nexus.velocitypowered.com/repository/maven-public/'}
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://maven.quiltmc.org/repository/release/' }
}

sourceSets {
    main
}

configurations {
    retroguard
    mcinjector
    enigma
    quiltflower
    diffpatch
}

apply plugin: 'com.ancientmc.acp'

dependencies {
    implementation gradleApi()
    implementation files(MC_REPO).getAsFileTree()

    retroguard 'de.oceanlabs.mcp:RetroGuard:3.6.6'
    retroguard configurations.retroguard.dependencies
    mcinjector 'de.oceanlabs.mcp:mcinjector:3.8.0'
    enigma 'cuchaz:enigma-cli:2.1.0'
    enigma 'cuchaz:enigma:2.1.0'
    enigma configurations.enigma.dependencies
    quiltflower 'org.quiltmc:quiltflower:1.8.1'
    diffpatch 'net.minecraftforge:DiffPatch:2.0.7'
}

tasks.withType(JavaExec) {
    systemProperty "java.library.path", "run\\bin\\natives\\" + OSName.getOSName() + "\\"
}

task setup() {
    group = "acp-run"
    dependsOn ':execute'
}

task runClient(type: JavaExec) {
    group = "acp-run"
    main = "acp.client.Start"
    classpath = sourceSets.main.runtimeClasspath
}

FileFilter gitIgnoreFilter = (File file) -> !file.getName().endsWith(".gitignore")
FileFilter runFilter = (File file) -> !file.getName().endsWith(".gitignore") && !file.getName().contains("bin")

clean {
    delete(file(Paths.ACP_DIR_NATIVES))
    delete(file(Paths.ACP_DIR_SRC + "net\\"))
    delete(file(Paths.ACP_DIR_TEMP).listFiles(gitIgnoreFilter))
    delete(file(Paths.ACP_DIR_RESOURCES).listFiles(gitIgnoreFilter))
    delete(file(Paths.ACP_DIR_RUN).listFiles(runFilter))
    delete(file(Paths.ACP_DIR_LOGS).listFiles(gitIgnoreFilter))
}
